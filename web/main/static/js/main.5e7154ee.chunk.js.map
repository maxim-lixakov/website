{"version":3,"sources":["logo.svg","components/line.js","components/constants.js","App.js","reportWebVitals.js","index.js"],"names":["series","name","data","color","a","fetch","mode","method","headers","result","console","log","json","f","categories","Line","props","pannable","zoomable","style","height","text","position","orientation","title","min","max","map","item","idx","type","tooltip","visible","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,I,0CCaFA,EAAS,CACpB,CACDC,KAAM,iCACNC,KAAM,CAAC,IAAK,IAAK,IAAK,KACtBC,MCZQ,Y,4CDgBT,8BAAAC,EAAA,6DACMF,EAAOG,MAAM,sCAAuC,CAAEC,KAAM,UAC9DC,OAAQ,OAAQC,QAAS,CACvB,eAAgB,mBAAoB,8BAAgC,IAChE,oCAAqC,KAJ/C,SAMqBN,EANrB,OAMMO,EANN,OAOEC,QAAQC,IAAIF,EAAOG,QAPrB,4C,0DAUAC,GAGA,IAAMC,EAAa,CAAC,uCAAU,6CAAW,2BAAQ,sBA4BlCC,EA1BF,SAAAC,GACX,OACD,eAAC,IAAD,CAAOC,UAAQ,EAACC,UAAQ,EAACC,MAAO,CAAEC,OAAQ,KAA1C,UACA,cAAC,IAAD,CAAYC,KAAK,uCACjB,cAAC,IAAD,CAAaC,SAAS,MAAMC,YAAY,eACxC,cAAC,IAAD,UACA,cAAC,IAAD,CAAoBC,MAAO,CAAEH,KAAM,0DAAeI,IAAK,EAAGC,IAAK,QAE/D,cAAC,IAAD,UACA,cAAC,IAAD,CAAuBZ,WAAYA,MAEnC,cAAC,IAAD,UACCd,EAAO2B,KAAI,SAACC,EAAMC,GAAP,OACZ,cAAC,IAAD,CAEAC,KAAK,OACLC,QAAS,CAAEC,SAAS,GACpB9B,KAAM0B,EAAK1B,KACXD,KAAM2B,EAAK3B,MAJN4B,Y,YE7BSI,MAdf,WACG,OACF,qBAAKC,UAAU,MAAf,SACA,sBAAKA,UAAU,YAAf,UACA,iEAEA,qBAAKA,UAAU,UAAf,SACA,cAAC,EAAD,YCFcC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e7154ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {\r\n  Chart,\r\n  ChartSeries,\r\n  ChartSeriesItem,\r\n  ChartValueAxis,\r\n  ChartValueAxisItem,\r\n  ChartCategoryAxis,\r\n  ChartCategoryAxisItem,\r\n  ChartTitle,\r\n  ChartLegend,\r\n} from \"@progress/kendo-react-charts\";\r\nimport { COLORS } from './constants'\r\n\r\nexport const series = [\r\n  {\r\n name: \"месяц\",\r\n data: [400, 358, 418, 425],\r\n color: COLORS.total,\r\n  }\r\n];\r\n\r\nasync function f() {\r\n  let data = fetch('http://localhost:8000/main/getData/', { mode: 'no-cors',\r\n    method: 'POST', headers: {\r\n      'Content-Type': 'application/json', \"Access-Control-Allow-Origin\" : \"*\",\r\n          \"Access-Control-Allow-Credentials\" : true\r\n    },});\r\n  let result = await data;\r\n  console.log(result.json())\r\n}\r\n\r\nf()\r\n\r\n\r\nconst categories = [\"январь\", \"февраль\", \"март\", 'май'];\r\n\r\nconst Line = props => {\r\n  return (\r\n <Chart pannable zoomable style={{ height: 350 }}>\r\n <ChartTitle text=\"Application status - last 3 months\" />\r\n <ChartLegend position=\"top\" orientation=\"horizontal\" />\r\n <ChartValueAxis>\r\n <ChartValueAxisItem title={{ text: \"километры\" }} min={0} max={500} />\r\n </ChartValueAxis>\r\n <ChartCategoryAxis>\r\n <ChartCategoryAxisItem categories={categories} />\r\n </ChartCategoryAxis>\r\n <ChartSeries>\r\n {series.map((item, idx) => (\r\n <ChartSeriesItem\r\n key={idx}\r\n type=\"line\"\r\n tooltip={{ visible: true }}\r\n data={item.data}\r\n name={item.name}\r\n />\r\n ))}\r\n </ChartSeries>\r\n </Chart>\r\n  );\r\n};\r\n\r\nexport default Line;","export const COLORS = {\r\n  accepted: \"#059669\",\r\n  rejected: \"#B91C1C\",\r\n  pending: \"#6366F1\",\r\n  interviewing: \"#2563EB\",\r\n  total: \"#D97706\",\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport Graph from \"./components/graph\";\nimport Line from \"./components/line\"\nimport \"@progress/kendo-theme-material/dist/all.css\";\nimport \"hammerjs\";\n\nfunction App() {\n   return (\n <div className=\"App\">\n <div className=\"container\">\n <h1>Build React Graphs The Easy Way</h1>\n {/* other graphs */}\n <div className=\"section\">\n <Line />\n </div>\n </div>\n </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}