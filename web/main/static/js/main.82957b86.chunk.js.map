{"version":3,"sources":["logo.svg","components/line.js","components/constants.js","App.js","reportWebVitals.js","index.js"],"names":["categories","FlavorForm","props","state","value","handleChange","bind","handleSubmit","event","changeCategory","target","this","setState","preventDefault","onSubmit","onChange","id","React","Component","series","name","data","color","category","request","XMLHttpRequest","open","setRequestHeader","send","result","addEventListener","status","responseText","parseInt","i","push","map","item","Line","pannable","zoomable","style","height","text","position","orientation","title","min","max","idx","type","tooltip","visible","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,I,uECaXA,EAAa,GAGXC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAO,WAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,gDAQnB,SAAaE,GACTC,EAAeD,EAAME,OAAON,OAC5BO,KAAKC,SAAS,CAACR,MAAOI,EAAME,OAAON,U,0BAGvC,SAAaI,GACTA,EAAMK,mB,oBAGV,WACE,OACE,sBAAMC,SAAUH,KAAKJ,aAArB,SACE,gHAEE,yBAAQH,MAAOO,KAAKR,MAAMC,MAAOW,SAAUJ,KAAKN,aAAcW,GAAG,SAAjE,UACE,wBAAQZ,MAAM,SAAd,wDACA,wBAAQA,MAAM,OAAd,sCACA,wBAAQA,MAAM,QAAd,oE,GA1Baa,IAAMC,WAoClBC,EAAS,CACpB,CACDC,KAAM,iCACNC,KAAM,CAAC,IAAK,IAAK,IAAK,KACtBC,MCnDQ,YDwDHb,EAAiB,SAASc,GAC5B,GAAiB,SAAbA,EAAoB,CACpBA,EAAW,GACX,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,uCAAuC,GAC3DF,EAAQG,iBAAiB,+BAAgC,KACzDH,EAAQI,OACR,IAAIC,EAAS,GACbL,EAAQM,iBAAiB,QAAQ,WACN,MAAnBN,EAAQO,SACRF,EAASL,EAAQQ,iBAEzBH,EAASI,SAASJ,GAClB,IAAK,IAAIK,EAAE,EAAGA,GAAKL,EAAQK,IACvBX,EAASY,KAAKD,KAMpBb,EAAOrB,EAAWoC,KAAI,SAASC,GACjC,OAAOA,EAAKA,KAGhBlB,EAAO,GAAP,KAAoBE,EACpB,IAAMiB,EAAO,SAAApC,GACX,OACD,eAAC,IAAD,CAAOqC,UAAQ,EAACC,UAAQ,EAACC,MAAO,CAAEC,OAAQ,KAA1C,UACA,cAAC,IAAD,CAAYC,KAAK,2DACjB,cAAC,IAAD,CAAaC,SAAS,MAAMC,YAAY,eACxC,cAAC,IAAD,UACA,cAAC,IAAD,CAAoBC,MAAO,CAAEH,KAAM,0DAAeI,IAAK,EAAGC,IAAK,QAE/D,cAAC,IAAD,UACA,cAAC,IAAD,CAAuBhD,WAAYA,MAEnC,cAAC,IAAD,UACCmB,EAAOiB,KAAI,SAACC,EAAMY,GAAP,OACZ,cAAC,IAAD,CAEAC,KAAK,OACLC,QAAS,CAAEC,SAAS,GACpB/B,KAAMgB,EAAKhB,KACXD,KAAMiB,EAAKjB,MAJN6B,YE5ESI,MAhBf,WACG,OACF,qBAAKC,UAAU,MAAf,SACA,qBAAKA,UAAU,YAAf,SAEA,sBAAKA,UAAU,UAAf,UACC,qBAAKA,UAAU,aAAf,SACC,cAAC,EAAD,MAEF,cAAC,EAAD,YCLcC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82957b86.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {\r\n  Chart,\r\n  ChartSeries,\r\n  ChartSeriesItem,\r\n  ChartValueAxis,\r\n  ChartValueAxisItem,\r\n  ChartCategoryAxis,\r\n  ChartCategoryAxisItem,\r\n  ChartTitle,\r\n  ChartLegend,\r\n} from \"@progress/kendo-react-charts\";\r\nimport { COLORS } from './constants'\r\nimport React from \"react\";\r\nlet categories = [];\r\n\r\n\r\nclass FlavorForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'coconut'};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n      changeCategory(event.target.value);\r\n      this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n      event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Километраж по :\r\n          <select value={this.state.value} onChange={this.handleChange} id='select'>\r\n            <option value=\"months\">месяцам</option>\r\n            <option value=\"days\">дням</option>\r\n            <option value=\"weeks\">неделям</option>\r\n          </select>\r\n        </label>\r\n        {/*<input type=\"submit\" value=\"Выбрать\" id=\"submit\"/>*/}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport const series = [\r\n  {\r\n name: \"месяц\",\r\n data: [400, 358, 418, 425],\r\n color: COLORS.total,\r\n  }\r\n];\r\n\r\n\r\nconst changeCategory = function(category){\r\n    if (category === 'days'){\r\n        category = []\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', 'http://127.0.0.1:8000/main/getData/', false);\r\n        request.setRequestHeader('Access-Control-Allow-Headers', '*')\r\n        request.send();\r\n        let result = ''\r\n        request.addEventListener('load', function() {\r\n            if (request.status === 200) {\r\n                result = request.responseText;}\r\n            })\r\n        result = parseInt(result);\r\n        for (let i=1; i <= result; i++){\r\n            category.push(i);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst data = categories.map(function(item){\r\n    return item*item\r\n});\r\n\r\nseries[0]['data'] = data;\r\nconst Line = props => {\r\n  return (\r\n <Chart pannable zoomable style={{ height: 350 }}>\r\n <ChartTitle text=\"Статистка\" />\r\n <ChartLegend position=\"top\" orientation=\"horizontal\" />\r\n <ChartValueAxis>\r\n <ChartValueAxisItem title={{ text: \"километры\" }} min={0} max={500} />\r\n </ChartValueAxis>\r\n <ChartCategoryAxis>\r\n <ChartCategoryAxisItem categories={categories} />\r\n </ChartCategoryAxis>\r\n <ChartSeries>\r\n {series.map((item, idx) => (\r\n <ChartSeriesItem\r\n key={idx}\r\n type=\"line\"\r\n tooltip={{ visible: true }}\r\n data={item.data}\r\n name={item.name}\r\n />\r\n ))}\r\n </ChartSeries>\r\n </Chart>\r\n  );\r\n};\r\n\r\nexport {FlavorForm, Line};\r\n","export const COLORS = {\r\n  accepted: \"#059669\",\r\n  rejected: \"#B91C1C\",\r\n  pending: \"#6366F1\",\r\n  interviewing: \"#2563EB\",\r\n  total: \"#D97706\",\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport Graph from \"./components/graph\";\nimport \"@progress/kendo-theme-material/dist/all.css\";\nimport \"hammerjs\";\nimport {FlavorForm, Line} from './components/line'\n\n\nfunction App() {\n   return (\n <div className=\"App\">\n <div className=\"container\">\n {/* other graphs */}\n <div className=\"section\">\n  <div className=\"react-form\">\n   <FlavorForm/>\n  </div>\n <Line />\n </div>\n </div>\n </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}